(this is really bad and the zigzag tp is really broken, ill try and fix it)
ALSO the stay model thing is actually broken, what it does it it freezes your model and flings the upper part out, making you basically unhitabble, but your lower body is still hittable so watch out.
ANOTHER ALSO is that the 1 stud tp and platform things gets detected with brainrot on hand so be careful, well getting detected with platform is easy to bypass, 1 stud is kinda easy




local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local hrp = char:WaitForChild("HumanoidRootPart")

-- GUI
local screenGui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))
local frame = Instance.new("Frame")
frame.Size = UDim2.new(0,400,0,400)
frame.Position = UDim2.new(0.3,0,0.3,0)
frame.BackgroundColor3 = Color3.fromRGB(40,40,40)
frame.Active = true
frame.Draggable = true
frame.Parent = screenGui

local function makeButton(text, y)
	local btn = Instance.new("TextButton")
	btn.Size = UDim2.new(1,-10,0,30)
	btn.Position = UDim2.new(0,5,0,y)
	btn.Text = text
	btn.BackgroundColor3 = Color3.fromRGB(80,80,80)
	btn.TextColor3 = Color3.new(1,1,1)
	btn.Parent = frame
	return btn
end

-- Buttons
local blockBtn = makeButton("Toggle Block Follower",5)
local stayBtn = makeButton("Toggle Stay Model Fling",40)
local teleportBtn = makeButton("Toggle Teleport 1 Stud",75)
local zigzagBtn = makeButton("Toggle Zigzag Teleport",110)
local proxyArmBtn = makeButton("Toggle Proxy Arms",145)
local closeBtn = makeButton("Close GUI",180)

-- Block follower
local block
local runningFollower = false
local connFollower
local function startFollower()
	if runningFollower then return end
	runningFollower = true
	block = Instance.new("Part")
	block.Size = Vector3.new(6,1,6)
	block.Anchored = true
	block.CanCollide = true
	block.BrickColor = BrickColor.new("Bright blue")
	block.Parent = workspace
	connFollower = RunService.Heartbeat:Connect(function()
		if hrp and block then
			block.Position = hrp.Position - Vector3.new(0, hrp.Size.Y/2 + block.Size.Y/2, 0)
		end
	end)
end
local function stopFollower()
	runningFollower = false
	if connFollower then connFollower:Disconnect() end
	connFollower = nil
	if block then block:Destroy() end
	block = nil
end

-- Stay model fling
local stayActive = false
local dummyModel
local dummyParts = {}
local connStay
local savedParts = {}
local function toggleStayModelFling()
	stayActive = not stayActive
	if stayActive then
		savedParts = {}
		for _, part in ipairs(char:GetDescendants()) do
			if part:IsA("BasePart") then
				savedParts[part] = part.CFrame
			end
		end

		if dummyModel then dummyModel:Destroy() end
		dummyModel = Instance.new("Model", workspace)
		dummyModel.Name = "StayDummy"
		dummyParts = {}
		for _, part in ipairs(char:GetDescendants()) do
			if part:IsA("BasePart") then
				local clone = part:Clone()
				clone.Anchored = true
				clone.CanCollide = false
				clone.Parent = dummyModel
				table.insert(dummyParts, {original=part, clone=clone})
			end
		end

		for part, _ in pairs(savedParts) do
			if part and part.Parent then
				part.Velocity = Vector3.new(math.random(-50,50), math.random(50,100), math.random(-50,50))
				part.RotVelocity = Vector3.new(math.random(-10,10), math.random(-10,10), math.random(-10,10))
			end
		end

		connStay = RunService.Heartbeat:Connect(function()
			for _, pair in ipairs(dummyParts) do
				if pair.original and pair.clone then
					pair.clone.CFrame = pair.original.CFrame
				end
			end
		end)
	else
		for part, cf in pairs(savedParts) do
			if part and part.Parent then
				part.CFrame = cf
				part.Velocity = Vector3.new(0,0,0)
				part.RotVelocity = Vector3.new(0,0,0)
			end
		end
		savedParts = {}
		if connStay then connStay:Disconnect() connStay = nil end
		if dummyModel then dummyModel:Destroy() dummyModel = nil end
		dummyParts = {}
	end
end

-- Teleport 1 stud
local teleportActive = false
local teleportCoroutine
local function toggleTeleport()
	teleportActive = not teleportActive
	if teleportActive then
		teleportCoroutine = coroutine.create(function()
			while teleportActive do
				if hrp then
					hrp.CFrame = hrp.CFrame + hrp.CFrame.LookVector
				end
				wait(0.75)
			end
		end)
		coroutine.resume(teleportCoroutine)
	else
		teleportCoroutine = nil
	end
end

-- Zigzag teleport
local zigzagActive = false
local zigzagCoroutine
local function toggleZigzag()
	zigzagActive = not zigzagActive
	if zigzagActive then
		local direction = 1
		zigzagCoroutine = coroutine.create(function()
			while zigzagActive do
				if hrp then
					local forward = hrp.CFrame.LookVector
					local right = hrp.CFrame.RightVector
					local offset = (forward + right * direction).Unit * 2
					hrp.CFrame = hrp.CFrame + offset
				end
				direction = direction * -1
				wait(0.6)
			end
		end)
		coroutine.resume(zigzagCoroutine)
	else
		zigzagCoroutine = nil
	end
end

-- Proxy Arms
local proxyArmActive = false
local proxyPart
local armWelds = {}
local proxyDistance = 6
local armSpeed = 50

local function enableProxyArms()
	if proxyArmActive then return end
	proxyArmActive = true

	proxyPart = Instance.new("Part")
	proxyPart.Size = Vector3.new(2,2,1)
	proxyPart.Anchored = false
	proxyPart.CanCollide = false
	proxyPart.Transparency = 1
	proxyPart.CFrame = hrp.CFrame + hrp.CFrame.LookVector * proxyDistance
	proxyPart.Parent = workspace

	local leftArm = char:FindFirstChild("LeftUpperArm") or char:FindFirstChild("Left Arm")
	local rightArm = char:FindFirstChild("RightUpperArm") or char:FindFirstChild("Right Arm")
	local arms = {leftArm, rightArm}

	for _, arm in ipairs(arms) do
		if arm then
			local weld = Instance.new("WeldConstraint")
			weld.Part0 = arm
			weld.Part1 = proxyPart
			weld.Parent = arm
			table.insert(armWelds, weld)
		end
	end

	RunService.RenderStepped:Connect(function()
		if proxyArmActive and proxyPart then
			local move = Vector3.new()
			if UserInputService:IsKeyDown(Enum.KeyCode.W) then move = move + proxyPart.CFrame.LookVector end
			if UserInputService:IsKeyDown(Enum.KeyCode.S) then move = move - proxyPart.CFrame.LookVector end
			if UserInputService:IsKeyDown(Enum.KeyCode.A) then move = move - proxyPart.CFrame.RightVector end
			if UserInputService:IsKeyDown(Enum.KeyCode.D) then move = move + proxyPart.CFrame.RightVector end
			if move.Magnitude > 0 then
				proxyPart.Velocity = move.Unit * armSpeed
			else
				proxyPart.Velocity = Vector3.new(0,0,0)
			end
		end
	end)

	UserInputService.InputBegan:Connect(function(input, gameProcessed)
		if gameProcessed then return end
		if proxyArmActive and input.KeyCode == Enum.KeyCode.E then
			local rayOrigin = proxyPart.Position
			local rayDir = proxyPart.CFrame.LookVector * 5
			local ray = Ray.new(rayOrigin, rayDir)
			local part, _ = workspace:FindPartOnRay(ray, char)
			if part and part.Parent then
				for _, prompt in ipairs(part:GetDescendants()) do
					if prompt:IsA("ProximityPrompt") then
						prompt:InputHoldBegin()
						task.wait(0.1)
						prompt:InputHoldEnd()
					end
				end
			end
		end
	end)
end

local function disableProxyArms()
	if not proxyArmActive then return end
	proxyArmActive = false
	if proxyPart then
		proxyPart:Destroy()
		proxyPart = nil
	end
	for _, weld in ipairs(armWelds) do
		weld:Destroy()
	end
	armWelds = {}
end

-- Button connections
blockBtn.MouseButton1Click:Connect(function()
	if runningFollower then stopFollower() else startFollower() end
end)
stayBtn.MouseButton1Click:Connect(toggleStayModelFling)
teleportBtn.MouseButton1Click:Connect(toggleTeleport)
zigzagBtn.MouseButton1Click:Connect(toggleZigzag)
proxyArmBtn.MouseButton1Click:Connect(function()
	if proxyArmActive then
		disableProxyArms()
	else
		enableProxyArms()
	end
end)

closeBtn.MouseButton1Click:Connect(function()
	stopFollower()
	if stayActive then toggleStayModelFling() end
	if teleportActive then toggleTeleport() end
	if zigzagActive then toggleZigzag() end
	if proxyArmActive then disableProxyArms() end
	screenGui:Destroy()
end)

-- Character respawn
player.CharacterAdded:Connect(function(newChar)
	char = newChar
	hrp = newChar:WaitForChild("HumanoidRootPart")
end)
